
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="../../favicon.ico">

    <title>Welcome to PythonOnWheels</title>

    <!-- Bootstrap core CSS -->
    <!--link href="../../dist/css/bootstrap.min.css" rel="stylesheet"-->
    <link href="{{ static_url("css/bootstrap.min.css") }}" rel="stylesheet">
    <!-- Custom styles for this template -->
    <!--link href="sticky-footer-navbar.css" rel="stylesheet"-->
    <!--link href="{{ static_url("css/sticky-footer-navbar.css") }}" rel="stylesheet"-->
    
    <link href="{{ static_url("css/justified-nav.css") }}" rel="stylesheet">
    <link href="{{ static_url("css/prism.css") }}" rel="stylesheet">
    {% block css %}
      
    {% end %}

    {% block js %}
      
    {% end %}
  </head>

  <body>

   <div class="container" >

      <!-- The justified navigation menu is meant for single line per list item.
           Multiple lines will require custom code not provided by Bootstrap. -->
      

      <!-- Jumbotron -->
      <div class="jumbotron">
        <img src={{ static_url("images/pow_logo_300.png") }}  style="display: inline-block;" />
           <hr>
        <p class="lead">The quick and simple generative Webframework for python.</p>
          <p><a class="btn btn-lg btn-success" href="#" role="button">Get started today</a></p>
      </div>
      <!-- START THE FEATURETTES -->

      <!--hr class="featurette-divider" -->
      <div class="row featurette">
        <div class="col-md-2">
          &nbsp;
        </div>
        <div class="col-md-8">
             <h2 class="featurette-heading">Everything you need on board <span class="text-muted">Batteries included.</span></h2>
                <p class="lead">
                  With PythonOnWheels you need no extra tools to start. Everything from DB to Webserver and template engine is included.
                  But you are not forced to use them and can go raw or include your own tools whenever you want.
                </p>
                <h3> Based on a very Strong foundation: </h3>
                <ul>
                <li>python 3.x</li>
                <li>tornado webserver</li>
                <li>sqlalchemy ORM</li>
                <li>alembic migrations (automaticalla generated behind the scenes)</li>
                <li>cerberus schemas and validation on board</li>
                <li>react.js views</li>
                <li>tornado templates</li>
                </ul>
        </div>
        <div class="col-md-2">
          &nbsp;
        </div>
      </div>
      
      <div class="row featurette">
        <div class="col-md-2">
          &nbsp;
        </div>
        <div class="col-md-8">
            <hr class="featurette-divider">
              <h2 class="featurette-heading">Probably the most simple SQL relations out there! <span class="text-muted"> RESTrouting see below.</span></h2>
                <p class="lead">
                  With PythonOnWheels you simply add a class decorator like <code>@relation.has_many("comments") </code> to the Post model and every Post can have comments. It will 
                  be automatically mapped to the DB (SQLite, Postgres, MySQL, MariaDb, Oracle, MSSQL ...) and to all Models.
                  Additionally you can set RESTroutes by simply add the class decorator: <code>@app.add_rest_routes("post") </code>to add all the typical RESTroutes for the Post model.
                </p>
                <p class="lead">
                  Here is a typical pow model using a cerberus schema definition.
                  <ul>
                    <li>the <code>@relation.setup_schema() </code> decorator will map this schema to a vaild
                    sqlalchemy column definition set.</li>
                    <li>the model will also automatically get all the right Foreign_Keys and python attributes to
                    create a has_many relationship to the <code> comments </code> model. 
                    This is all done for you with the <code>@relation.has_many("comments") </code>
                  </ul>
                </p>
                <pre><code class="language-python">
                    @relation.has_many("comments")
                    @relation.setup_schema()
                    class Post(Base):
                          #
                          # Schema definition with the new (cerberus) schema style 
                          # which offer you immediate validation 
                          #
                          schema = {
                              # string sqltypes can be TEXT or UNICODE or nothing
                              'author': {'type': 'string', 'maxlength' : 35},
                              'title': {'type': 'string'},
                              'text': {'type': 'string'}
                          }

                          # init
                          def __init__(self, **kwargs):
                              self.init_on_load(**kwargs)

                          # your methods down here


                </code></pre>
          </div>
          <div class="col-md-2">
          &nbsp;
          </div>
      </div>

      <div class="row featurette">
        <div class="col-md-2">
          &nbsp;
        </div>
        <div class="col-md-8">
            <hr class="featurette-divider">
              <h2 class="featurette-heading">Probably the most simple RESTrouting out there <span class="text-muted"> Flask like routing included as well.</span></h2>
                <p class="lead">
                  With PythonOnWheels you simply add a class decorator like <code>@app.add_rest_routes("base") </code> 
                  to your handler and you get all the typical REST routes mapped to the according CRUD methods of your 
                  handler class.
                  Additionally you can set RESTroutes by simply add the class decorator: <code>@app.add_rest_routes("post") </code>to add all the typical RESTroutes for the Post model.
                </p>
                <p class="lead">
                  Here is a typical pow model using a cerberus schema definition.
                  <ul>
                    <li>the <code>@relation.setup_schema() </code> decorator will map this schema to a vaild
                    sqlalchemy column definition set.</li>
                    <li>the model will also automatically get all the right Foreign_Keys and python attributes to
                    create a has_many relationship to the <code> comments </code> model. 
                    This is all done for you with the <code>@relation.has_many("comments") </code>
                  </ul>
                </p>
                <pre><code class="language-python">
                    @relation.has_many("comments")
                    @relation.setup_schema()
                    class Post(Base):
                          #
                          # Schema definition with the new (cerberus) schema style 
                          # which offer you immediate validation 
                          #
                          schema = {
                              # string sqltypes can be TEXT or UNICODE or nothing
                              'author': {'type': 'string', 'maxlength' : 35},
                              'title': {'type': 'string'},
                              'text': {'type': 'string'}
                          }

                          # init
                          def __init__(self, **kwargs):
                              self.init_on_load(**kwargs)

                          # your methods down here


                </code></pre>
          </div>
          <div class="col-md-2">
          &nbsp;
          </div>
      </div>
      <hr class="featurette-divider">

      <div class="row featurette">
        <div class="col-md-2">
          &nbsp;
        </div>
        <div class="col-md-8">
          <h2 class="featurette-heading">And finally: a super easy workflow.<span class="text-muted"> Quick to start and all the basics on board:</span></h2>
          <p class="lead"></p>
          </ul>
          <div class="row featurette">
            <div class="col-md-1">
            &nbsp;
            </div>
            <div class="col-md-10">
            <li>generative approach (not noisy)</li>
              <ul>
                <li><code>generate_models script</code></li>
                <li><code>generate_migrations script </code></li>
                <li><code>generate_handlers</code> (handler are controllers)</li>
                <li><code>generate_app</code></li>
              </ul>
              <li>super easy relations with decorators @relations.has_many("comments")</li>
                <ul>
                  <li><code>@has_many(), @has_one(), @one_to_one(), @tree()</code></li>
                  <li> All the rest including foreign_keys, virtual python attributes are injected for you.</li>
                </ul>
              <li>super easy REST routing with decorators @app.add\_restful\_routes(), </li>
                <ul><li><code>@app.add_rest_routes("base_route")</code></li></ul>
              <li>flask like routing decorator @app.add_route(route)</li>
                <ul><li><code>@app.add_route("route")</code></li></ul>
              <li>db migrations autogenerated using alembic in the back </li>
                <ul><li><code>generate_migration, update_db</code></li></ul>
              <li>validation on board with cerberus schemas</li>
                <ul><li><code>model.validate() => executes cerberus validator</code></li></ul>
              
              
              </ul>
            </div>
            <div class="col-md-1">
            &nbsp;
            </div>
          </div>

        </div>
        <div class="col-md-2">
          &nbsp;
        </div>
      </div>

     

      <!-- /END THE FEATURETTES -->
      

      <!-- Example row of columns -->
      
      
      <!-- Site footer -->
      {% include "footer.tmpl" %}

    </div> <!-- /container -->


  </body>
</html>
